<!doctype html>
<html lang="en">
  <head>
    <!-- bootstrap start  -->
   
    <script src='https://kit.fontawesome.com/a076d05399.js' crossorigin='anonymous'></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css">
    <script src="https://cdn.jsdelivr.net/npm/jquery@3.6.1/dist/jquery.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/js/bootstrap.bundle.min.js"></script>
    <!-- bootstrap end  -->

    <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.5.0/css/ol.css" type="text/css">
    <link rel="stylesheet" href="css/style.css" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/proj4js/2.6.2/proj4.min.js"></script>
    <script src="https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.5.0/build/ol.js"></script>
    <script src="https://unpkg.com/@turf/turf@5.1.6/turf.min.js"></script>
  </head>
  <body>
 
   
    <div id="map" class="map"></div>
    <div id="info">&nbsp;</div>
    <!-- <input type="hidden" id="splittedPlots" value="<%=GeoJSON %>" /> -->
     
  
    <!-- display map -->
    <script>

        var style = new ol.style.Style({
        fill: new ol.style.Fill({
          color: 'rgba(255, 255, 255, 0.6)'
        }),
        stroke: new ol.style.Stroke({
          color: '#319FD3',
          width: 1
        }),
        text: new ol.style.Text({
          font: '12px Calibri,sans-serif',
          fill: new ol.style.Fill({
            color: '#000'
          }),
          stroke: new ol.style.Stroke({
            color: '#fff',
            width: 3
          })
        })
      });

      var vectorLayer = new ol.layer.Vector({
        source: new ol.source.Vector({
          url:window.location.origin + "/"+ "mapGeojson-api",
          format: new ol.format.GeoJSON()
        }),
        style: function(feature) {
          style.getText().setText(feature.get('plot_no_en'));
          return style;
        }
      });

      var map = new ol.Map({
        layers: [
            vectorLayer,
            new ol.layer.Graticule({
                visible: true,
                strokeStyle: new ol.style.Stroke({
                  color: 'rgba(255,120,0,0.9)',
                  width: 1,
                  lineDash: [10,10],
                }),
                showLabels: true,
                wrapX: false ,
              }),
        ],
        target: 'map',
        view: new ol.View({
          center: [0.06363572987039787,-0.031641902511065065],
          zoom: 12
        })
      });
      map.addLayer(
            new ol.layer.Vector({
            source: new ol.source.Vector({
              url:window.location.origin + "/"+ "labeling-last-mutated-geojson-1",
              format: new ol.format.GeoJSON()
            }),
            style: new ol.style.Style({
              fill: new ol.style.Fill({
                color: 'rgba(0,255,0,0.1)'
              }),
                  stroke: new ol.style.Stroke({
                    color: 'red',
                    width: 3
                  })
                })
          })
          );
          map.addLayer(
            new ol.layer.Vector({
            source: new ol.source.Vector({
              url:window.location.origin + "/"+ "labeling-last-mutated-geojson-2",
              format: new ol.format.GeoJSON()
            }),
            style: new ol.style.Style({
              fill: new ol.style.Fill({
                color: 'rgba(0,255,0,0.1)'
              }),
                  stroke: new ol.style.Stroke({
                    color: 'red',
                    width: 3
                  })
                })
          })
        );

        map.addLayer(
            new ol.layer.Vector({
            source: new ol.source.Vector({
              url:window.location.origin + "/"+ "all-mutated-plots-api",
              format: new ol.format.GeoJSON()
            }),
            style: new ol.style.Style({
              fill: new ol.style.Fill({
                color: 'rgba(255,0,255,0.1)'
              }),
                  stroke: new ol.style.Stroke({
                    color: 'green',
                    width: 1
                  })
                })
          })
        );


    const displayFeatureInfo = function (pixel) {
    const feature = map.forEachFeatureAtPixel(pixel, function (feature) {
    return feature;
  });
  if (feature) {
    window.open( window.location.origin + "/searchplot?plotNo="+ feature.get("plot_no_en"));
  }
};
//searchplot?plotNo=13

map.on("dblclick", function (evt) {
  displayFeatureInfo(evt.pixel);
});
    
    </script>


<script>
   var highlightStyle = new ol.style.Style({
        stroke: new ol.style.Stroke({
          color: '#f00',
          width: 1
        }),
        fill: new ol.style.Fill({
          color: 'rgba(255,0,0,0.1)'
        }),
        text: new ol.style.Text({
          font: '12px Calibri,sans-serif',
          fill: new ol.style.Fill({
            color: '#000'
          }),
          stroke: new ol.style.Stroke({
            color: '#f00',
            width: 3
          })
        })
      });

      var featureOverlay = new ol.layer.Vector({
        source: new ol.source.Vector(),
        map: map,
        style: function(feature) {
          highlightStyle.getText().setText(feature.get('name'));
          return highlightStyle;
        }
      });

      var highlight;
      var displayFeatureInfo_forHighLight = function(pixel) {

        var feature = map.forEachFeatureAtPixel(pixel, function(feature) {
          return feature;
        });
        var info = document.getElementById('info');
        if (feature) {
          info.innerHTML = '&nbsp;&nbsp;Plot No ' + ': ' + feature.get('plot_no_en');
        } else {
          info.innerHTML = '&nbsp;';
        }
        if (feature !== highlight) {
          if (highlight) {
            featureOverlay.getSource().removeFeature(highlight);
          }
          if (feature) {
            featureOverlay.getSource().addFeature(feature);
          }
          highlight = feature;
        }
      };

      map.on('pointermove', function(evt) {
        if (evt.dragging) {
          return;
        }
        var pixel = map.getEventPixel(evt.originalEvent);
        displayFeatureInfo_forHighLight(pixel);
      });

      map.on('click', function(evt) {
        displayFeatureInfo_forHighLight(evt.pixel);
      });
</script>






    <script>
      function baseURL(){
        //var base_url = window.location.origin + '/' + window.location.pathname.split ('/') [1] + '/';
        var base_url = window.location.origin + "/";
        console.log(base_url);
      }
        
    </script>
  </body>
</html>



