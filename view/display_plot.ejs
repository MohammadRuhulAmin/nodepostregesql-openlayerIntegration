<!doctype html>
<html lang="en">
  <head>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.5.0/css/ol.css" type="text/css">
    <link rel="stylesheet" href="css/style.css" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/proj4js/2.6.2/proj4.min.js"></script>
    <script src="https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.5.0/build/ol.js"></script>
    <script src="https://unpkg.com/@turf/turf@5.1.6/turf.min.js"></script>

  </head>
  <body>
 
 

    <div id="map" class="map"></div>
    <br><br>
    <input id="plotInfo" type="hidden" value="<%=plotInfo %> "/>
    
    <br>
    <br>
    <table border="1px">
      <tr>
        <td>
          <button onclick="splitOperationWithTurf()"> Cut PolyGon </button></td>
        </td>
        <td>
          <div>
            <div>
                <span>
                  <label > Draw Geometry :</label>
                  <select  id="type">
                    <option value="Point">Point</option>
                    <option value="LineString">LineString</option>
                    <option value="Polygon">Polygon</option>
                    <option value="Circle">Circle</option>
                    <option value="None">None</option>
                  </select>
                </span>
            </div>
          </div>
        </td>
        <td>
          <button onclick="DisplaySplitPoly1()"> Display Splitted Polygon - 1  </button>
        </td>
        <td>
          <button onclick="DisplaySplitPoly2()"> Display Splitted Polygon - 2  </button>
        </td>
      </tr>
    </table>
    <br>
    <br>
    <div id="map_sp_1" class="map">
      <p id="area_sp_1"></p>
    </div>
    <br><br>
    <div id="map_sp_2" class="map">
      <p id="area_sp_2"></p>
    </div>
    
   
    <script type="text/javascript">
        const source = new ol.source.Vector({wrapX: false});
        const vector = new ol.layer.Vector({
            source: source,
        });

        const plotGeo =  document.getElementById("plotInfo").value;
       
        var map = new ol.Map({
            target: 'map',
            layers: [
                vector
            // new ol.layer.Tile({
            //     source: new ol.source.OSM()
            // })
            ],
            view: new ol.View()
        });
     var geometry = new ol.format.GeoJSON().readGeometry(plotGeo);
      map.addLayer(
        new ol.layer.Vector({
          source: new ol.source.Vector({
            features: [new ol.Feature(geometry)]
          })
        })
      );
      map.getView().fit(geometry);
      // display distance label start 
      
      var data = JSON.parse(plotGeo)
       // getting distance 
      var coordinateDistance = [];
      function designDistance(){
        const length = data.coordinates[0][0].length;
        
          for(let i = 1;i<length;i++){
              var coord = data.coordinates[0][0];
              var dist = distance(coord[i-1][0],coord[i][0],coord[i-1][1],coord[i][1]);
              coordinateDistance.push(dist);
          }
          coordinateDistance.push(distance(coord[length-1][0],coord[0][0],coord[length-1][1],coord[0][1]));
          
        }
      designDistance();
      // distance of coordinates 
      function distance(x1,x2, y1,y2){
         return Math.sqrt(  Math.pow((x1-x2),2)+ Math.pow((y1-y2),2));
      }
      // mid point of coordinates 
      const midPointArray = [];
      function midPointOfCoordinates(){
        let coord = data.coordinates[0][0];
       
        for(let i = 1;i<coord.length;i++){
          let midx = (coord[i-1][0] + coord[i][0])/2;
          let midy = (coord[i-1][1] + coord[i][1])/2;
          midPointArray.push([midx,midy]);
        }
        midPointArray.push([(coord[0][0] + coord[coord.length - 1][0])/2,(coord[0][1] + coord[coord.length-1][1])/2]);
        
      }
      midPointOfCoordinates();
      
      // function to add label : 
      function displayLabel(coordx,coordy,distance){
            var utm = "+proj=utm +zone=32";
            var wgs84 = "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs";
            var coord = proj4(utm,wgs84,[coordx, coordy])
            var labelFeature = new ol.Feature({
                geometry: new ol.geom.Point([coordx,coordy]),
            });
            var labelonly = new ol.style.Style({
                text: new ol.style.Text({
                    font: '14px sans-serif',
                    //offsetY: -25,
                    //text: `${parseInt(coordx)},${parseInt(coordy)}`,
                    text:`${parseInt(distance)} km`,
                    fill: new ol.style.Fill({
                        color: 'red'
                    }),
                })
            });
            labelFeature.setStyle(labelonly);
            var vectorSource = new ol.source.Vector({
                features: [labelFeature]
            });

            var vectorLayer = new ol.layer.Vector({
                source: vectorSource
            });
            
            map.addLayer(
                new ol.layer.Vector({
                    source: vectorSource
                })
            );
        }
       const coordinateSet = data.coordinates[0][0];
      
      //  for(let i = 0;i<coordinateSet.length;i++){
      //       displayLabel(coordinateSet[i][0],coordinateSet[i][1]);
      //  }
       for(let i = 0;i<midPointArray.length;i++){
          console.log(midPointArray[i][0],midPointArray[i][1])
          displayLabel(midPointArray[i][0]+4,midPointArray[i][1]+4, coordinateDistance[i]);
       }





      // display label end 





      // line splitting function
      var LineSplitterGeoJson ;
     
      const typeSelect = document.getElementById('type');
      let draw; 
      function addInteraction() {
        const value = typeSelect.value;
            if (value !== 'None') {
                draw = new ol.interaction.Draw({
                source: source,
                type: typeSelect.value,
                });
                map.addInteraction(draw);
                draw.on("drawend",function(e){
                    var writer = new ol.format.GeoJSON();
                    //pass the feature as an array
                    LineSplitterGeoJson = writer.writeFeatures([e.feature]);
                  
                });           
              
            }
      }
        typeSelect.onchange = function () {
            map.removeInteraction(draw);
            addInteraction();
        };

        addInteraction();

        var splittedPolygon;
        function splitOperationWithTurf(){
            var plotGeoJson = JSON.parse(plotGeo);
            var lineStringJson = JSON.parse(LineSplitterGeoJson);
            var poly = turf.polygon(plotGeoJson.coordinates[0]);
            var line = turf.polygon(lineStringJson.features[0].geometry);
            var poly_coordinates = poly.geometry.coordinates;
            var line_coordinates  = [line.geometry.coordinates.coordinates];
            var polyAsLine = turf.polygonToLine(poly);
            var makeLineGeoJson = {
              "type":"feature",
               "geometry":{
                  "coordinates":line_coordinates[0],
                  "type": "LineString"
               }
            };
            var unionedLines =  turf.union(polyAsLine,makeLineGeoJson);
            const polygonized = turf.polygonize(unionedLines);
            splittedPolygon = polygonized;
            console.log("======================")
            console.log("polygonized : ");
            console.log(polygonized); 
            console.log("======================");
        }
        
        // for splitted polygon - 1 
        function DisplaySplitPoly1(){
              
              const source_sp_1 = new ol.source.Vector({wrapX: false});
              const vector_sp_1 = new ol.layer.Vector({
                  source: source_sp_1,
              });

              var map_sp_1 = new ol.Map({
                  target: 'map_sp_1',
                  layers: [
                      vector_sp_1
                  ],
                  view: new ol.View()
              });
      
          var geometry_sp_1 = new ol.format.GeoJSON().readGeometry(splittedPolygon.features[0].geometry);
          console.log(splittedPolygon.features[0].geometry.coordinates)
         
          
          map_sp_1.addLayer(
              new ol.layer.Vector({
                source: new ol.source.Vector({
                  features: [new ol.Feature(geometry_sp_1)]
                })
              })
            );
            map_sp_1.getView().fit(geometry_sp_1);
            const sp_area_1_polygon = turf.polygon(splittedPolygon.features[0].geometry.coordinates);
            const area_sp_1 = turf.area(sp_area_1_polygon);
            document.getElementById('area_sp_1').innerHTML = "Area : " + area_sp_1 + " Square Meters ";
        }
        

       // for splitted polygon - 2 
        function DisplaySplitPoly2(){
          const source_sp_2 = new ol.source.Vector({wrapX: false});
          const vector_sp_2 = new ol.layer.Vector({
              source: source_sp_2,
          });

          var map_sp_2 = new ol.Map({
              target: 'map_sp_2',
              layers: [
                  vector_sp_2
              ],
              view: new ol.View()
          });
    

  
        var geometry_sp_2 = new ol.format.GeoJSON().readGeometry(splittedPolygon.features[1].geometry);
        map_sp_2.addLayer(
            new ol.layer.Vector({
              source: new ol.source.Vector({
                features: [new ol.Feature(geometry_sp_2)]
              })
            })
          );
          map_sp_2.getView().fit(geometry_sp_2);
          const sp_area_2_polygon = turf.polygon(splittedPolygon.features[1].geometry.coordinates);
          const area_sp_2 = turf.area(sp_area_2_polygon);
          document.getElementById('area_sp_2').innerHTML = "Area : " + area_sp_2 + " Square Meters ";
        }
       
        

    </script>
  </body>
</html>






