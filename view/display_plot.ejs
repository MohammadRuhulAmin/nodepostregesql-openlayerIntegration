<!doctype html>
<html lang="en">
  <head>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.5.0/css/ol.css" type="text/css">
    <style>
      html, body, .map {
        margin: 0;
        padding: 0;
        width: 100%;
        height: 100%;
      }
    </style>
    <script src="https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.5.0/build/ol.js"></script>



  </head>
  <body>
    <div id="map" class="map"></div>
    <input id="plotInfo" type="hidden" value="<%=plotInfo %> "/>
    <div class="row">
        <div class="col-auto">
          <span class="input-group">
            <label class="input-group-text" for="type">Geometry type:</label>
            <select class="form-select" id="type">
              <option value="Point">Point</option>
              <option value="LineString">LineString</option>
              <option value="Polygon">Polygon</option>
              <option value="Circle">Circle</option>
              <option value="None">None</option>
            </select>
          </span>
        </div>
      </div>


    <script type="text/javascript">
        const source = new ol.source.Vector({wrapX: false});

        const vector = new ol.layer.Vector({
            source: source,
        });

        const plotGeo =  document.getElementById("plotInfo").value;
        console.log(plotGeo);
        var map = new ol.Map({
            target: 'map',
            layers: [
                vector
            // new ol.layer.Tile({
            //     source: new ol.source.OSM()
            // })
            ],
            view: new ol.View()
        });
      var geometry = new ol.format.GeoJSON().readGeometry(plotGeo);
      map.addLayer(
        new ol.layer.Vector({
          source: new ol.source.Vector({
            features: [new ol.Feature(geometry)]
          })
        })
      );

      map.getView().fit(geometry);
      
      
      const typeSelect = document.getElementById('type');
      let draw; // global so we can remove it later
      function addInteraction() {
        const value = typeSelect.value;
            if (value !== 'None') {
                draw = new ol.interaction.Draw({
                source: source,
                type: typeSelect.value,
                });
                map.addInteraction(draw);
            }
      }
        typeSelect.onchange = function () {
            map.removeInteraction(draw);
            addInteraction();
        };

        addInteraction();
    </script>
  
  </body>
</html>