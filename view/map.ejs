
<!DOCTYPE html>
<html>
  <head>
    <title>Draw and Modify Features</title>
    <link rel="stylesheet" href="https://openlayers.org/en/v4.6.5/css/ol.css" type="text/css">
    <!-- The line below is only needed for old environments like Internet Explorer and Android 4.x -->

    <script src="https://cdn.polyfill.io/v2/polyfill.min.js?features=requestAnimationFrame,Element.prototype.classList,URL"></script>
    <script src="https://openlayers.org/en/v4.6.5/build/ol.js"></script>
   
    <style>
       .map {
          width: 100%;
          height: 400px;
        }
    </style>
  </head>
  <body>
    <div id="map" class="map"></div>
    <form class="form-inline">
      <label>Geometry type &nbsp;</label>
      <select id="type">
        <option value="Modify" >Modify </option>
        <option value="Point">Point</option>
        <option value="LineString">LineString</option>
        <option value="Polygon">Polygon</option>
        <option value="Circle">Circle</option>
      </select>
    </form>
 
    <input id="plotInfo" type="text" value="<%=plotInfo %> "/>
    <!-- <script src="../assets/geojson.json"></script> -->
    <script type="text/javascript">
      
      const plotGeo =  document.getElementById("plotInfo").value;
      console.log(plotGeo);
      const raster = new ol.layer.Tile({
        source: new ol.source.OSM(),
      });
      var typeSelect = document.getElementById('type');
      var sourceOfDrawing = new ol.source.Vector();
      var vectorOfDrawing = new ol.layer.Vector({
        source: sourceOfDrawing,
        style: new ol.style.Style({
          fill: new ol.style.Fill({
            color: 'rgba(255, 255, 255, 0.2)'
          }),
          stroke: new ol.style.Stroke({
            color: '#ffcc33',
            width: 2
          }),
          image: new ol.style.Circle({
            radius: 7,
            fill: new ol.style.Fill({
              color: '#ffcc33'
            })
          })
        })
      });

      /*
        const vectorSource = new VectorSource({
  features: new GeoJSON().readFeatures(geojsonObject),
});

const vectorLayer = new VectorLayer({
  source: vectorSource,
  style: styleFunction,
});
      */

var xlotGeo = {
  "type": "FeatureCollection",
  "features": [
    {
      "type": "Feature",
      "properties": {},
      "geometry": {
        "coordinates": 
        [
          [
            [
              88.43450687294342,
              26.437457685963267
            ],
            [
              88.55365297946355,
              25.956375258673404
            ],
            [
              88.38486266189483,
              25.40158813895171
            ],
            [
              87.98770897349561,
              24.880272889229488
            ],
            [
              87.52105338962656,
              23.50367562328212
            ],
            [
              88.39479150410455,
              22.287207239865168
            ],
            [
              90.06283699537732,
              21.97449806828466
            ],
            [
              92.74362439206766,
              22.232073765195324
            ],
            [
              93.041489658368,
              23.357913754264786
            ],
            [
              92.13796501726091,
              24.98831358457251
            ],
            [
              91.9989613209429,
              25.6435063982302
            ],
            [
              90.31105814524886,
              26.170434997979854
            ],
            [
              88.43450687294342,
              26.437457685963267
            ]
          ]
        ],
        
        "type": "Polygon"
      }
    }
  ]
};




      var vectorForMap = new ol.layer.Vector({
        source: new ol.source.Vector({
        features: (new ol.format.GeoJSON()).readFeatures(xlotGeo, {
            dataProjection: 'EPSG:4326',
          featureProjection: 'EPSG:3857'
        })
      }),
      });

   
    
  

    var selectForMap = new ol.interaction.Select({
        wrapX: false,
    });

      var modifyForMap = new ol.interaction.Modify({
        features: selectForMap.getFeatures()
       
      });
      
   
    
      var  map = new ol.Map({
          interactions : ol.interaction.defaults().extend([selectForMap, modifyForMap]),
          layers: [vectorOfDrawing,vectorForMap],
          target: 'map',
          view: new ol.View({
           //center: [-11000000, 4600000],
           //center:[90.19530825,24.988718323],
           center: ol.proj.transform([90.19530825,24.988718323], 'EPSG:4326', 'EPSG:3857'),
            zoom: 8
          })
        });
      

      var modifyOfDrawing = new ol.interaction.Modify({source: sourceOfDrawing});
      map.addInteraction(modifyOfDrawing);

      var draw, snap; 
      

      function addInteractions() {
      
        if(typeSelect.value != "Modify"){
          map.getInteractions().forEach(x => {
            x.setActive(false)
            console.log(x);
          });
          
          //map.getInteractions().select = false;
          draw = new ol.interaction.Draw({
              source: sourceOfDrawing,
              type: typeSelect.value
            });
            map.addInteraction(draw);
            snap = new ol.interaction.Snap({source: sourceOfDrawing});
            map.addInteraction(snap);  
        }
        else{
          map.getInteractions().forEach(x => x.setActive(true));
          
        }
      }

      /**
       * Handle change event.
       */
      typeSelect.onchange = function() {
        map.removeInteraction(draw);
        map.removeInteraction(snap);
        addInteractions();
      };

      addInteractions();
    </script>
  </body>
</html>