<!doctype html>
<html lang="en">
  <head>
    <!-- bootstrap start  -->
   
    <script src='https://kit.fontawesome.com/a076d05399.js' crossorigin='anonymous'></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css">
    <script src="https://cdn.jsdelivr.net/npm/jquery@3.6.1/dist/jquery.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/js/bootstrap.bundle.min.js"></script>
    <!-- bootstrap end  -->

    <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.5.0/css/ol.css" type="text/css">
    <link rel="stylesheet" href="css/style.css" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/proj4js/2.6.2/proj4.min.js"></script>
    <script src="https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.5.0/build/ol.js"></script>
    <script src="https://unpkg.com/@turf/turf@5.1.6/turf.min.js"></script>
  </head>
  <body>
 
   
    <div id="map" class="map">
      <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#exampleModalCenter">
          <i style='font-size:24px' class='fas'>&#xf015;</i>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
          <ul class="navbar-nav align-content-end">
            <li class="nav-item active">
              <p class="nav-link" >Total area : <%=(parseFloat(plotArea)*0.00002295684113).toFixed(2)  %> acre <span class="sr-only">(current)</span></p>
            </li>
            <li class="nav-item">
              <p class="nav-link active" >Shp Leng : <%=(parseFloat(plotLeng)*3.28084).toFixed(4)  %> ft</p>
            </li>
            <li class="nav-item">
              <p class="nav-link active" >area 1 : <span id="sA_1"></span></p>
            </li>
            <li class="nav-item">
              <p class="nav-link " > area 2 : <span id="sA_2"></span></p>
            </li>
            <li class="nav-item ">
              
             
            </li>
          </ul>
         
        </div>
        <select id="type" class="btn  float-right">
          <option value="None">Draw  </option>
       
          <option class="btn" value="LineString">LineString</option>
        </select>
        <div class="btn-group" role="group" aria-label="Basic example">
          <button type="button" class="btn btn-success m-1" onclick="splitOperationWithTurf()" ><i style="font-size:24px" class="fa">&#xf0c4;</i></button>
          <button type="button" class="btn btn-success m-1" onclick="DisplaySplitPoly1()"> Plot 1 </button>
          <button type="button" class="btn btn-success m-1" onclick="DisplaySplitPoly2()"> Plot 2</button>
          <button type="button" class="btn btn-primary m-1" onclick="removeLastVectorString()"> CLR</button>
        </div>
        
       
      </nav>
    
    
    
      
      
    
    </div>
   
    <br><br>
    <input id="plotInfo" type="hidden" value="<%=plotInfo %> "/>
    
    <!-- modal start  -->
    <br>
    <br>
    
    
    <!-- Modal -->
    <div class="modal fade" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
      <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <h4 class="modal-title" id="exampleModalLongTitle">Location </h4>
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
              <span aria-hidden="true">&times;</span>
            </button>
          </div>
          <div class="modal-body">
            <table class="table table-striped">
                <tr>
                  <td>District</td>
                  <td><%=district %></td>
                </tr>
                <tr>
                  <td>Sub District </td>
                  <td><%=subDistrict %></td>
                </tr>
                <tr>
                  <td>JL No </td>
                  <td><%=jlNo %></td>
                </tr>
                <tr>
                  <td>Plot No</td>
                  <td><%=plotNo %></td>
                </tr>
               
            </table>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
           
          </div>
        </div>
      </div>
    </div>
    <!-- modal end  -->
    <br>
    <br>
  
    <br>
    <br>
    <div id="map_sp_1" class="map">
      <p id="area_sp_1"></p>
    </div>
    <br><br>
    <br><br>
    <br><br>
    <br><br>
    <div id="map_sp_2" class="map">
      <p id="area_sp_2"></p>
    </div>
    
    <!-- script for display parent plot  -->
   <script type="text/javascript">
      const source = new ol.source.Vector({wrapX: false});
      const vector_string = new ol.layer.Vector({
            source:source,
            style: new ol.style.Style({
              fill: new ol.style.Fill({
                color: 'rgba(255, 255, 255, 0.9)'
              }),
              stroke: new ol.style.Stroke({
                color: '#FFA500',
                width: 4
              })
            })
        });
      const plotGeo =  document.getElementById("plotInfo").value;
      const map = new ol.Map({
            target: 'map',
            layers: [
                vector_string,
                new ol.layer.Graticule({
                // the style to use for the lines, optional.
                strokeStyle: new ol.style.Stroke({
                  color: 'rgba(255,120,0,0.9)',
                  width: 1,
                  lineDash: [10,10],
                }),
                showLabels: true ,
                wrapX: false ,
              }),
                
                
            ],
            
            
           
            view: new ol.View()
        });
      var geometry = new ol.format.GeoJSON().readGeometry(plotGeo);
      function removeLastVectorString(){
        var features_lineString = vector_string.getSource().getFeatures();
        features_lineString.forEach((feature) => {
          vector_string.getSource().removeFeature(feature);
         });
      
         var features_spPlot_1 = vector_sp_1.getSource().getFeatures();
         features_spPlot_1.forEach((feature) => {
          vector_sp_1.getSource().removeFeature(feature);
         });
          
        
      }
      map.addLayer(
        new ol.layer.Vector({
          source: new ol.source.Vector({
            features: [new ol.Feature(geometry)]
          }),
          style: new ol.style.Style({
              stroke: new ol.style.Stroke({
                color: 'black',
                width: 4
              })
            })
         
        })
      );
      map.getView().fit(geometry);
      function DisplayGridLayer(){
       
      }
   </script>

   <!-- labeling for parent plot  -->
   <script>
      var vector_sp_1;
      var data = JSON.parse(plotGeo)
       // getting distance 
      var coordinateDistance_parent = [];
      var coordinateDistance_sp_plot_1 = [];
      var coordinateDistance_sp_plot_2 = [];
      var parentCoordinatesLangLot = [];
      function parentCoordinateLangLotConverter(){
          for(let i = 0;i<data.coordinates[0][0].length;i++){
             const utm = "+proj=utm +zone=32";
             const wgs84 = "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs";
             const coord = proj4(utm,wgs84,[data.coordinates[0][0][i][0],data.coordinates[0][0][i][1]])
             parentCoordinatesLangLot.push(coord);
          }
      }
      parentCoordinateLangLotConverter();
      
      function designDistance(data,coordinateDistance){
        const length = parentCoordinatesLangLot.length;
          for(let i = 1;i<length;i++){
              var dist = distance(parentCoordinatesLangLot[i-1][0],parentCoordinatesLangLot[i][0],parentCoordinatesLangLot[i-1][1],parentCoordinatesLangLot[i][1]);
              coordinateDistance.push(dist);
          }
          coordinateDistance.push(distance(parentCoordinatesLangLot[length-1][0],parentCoordinatesLangLot[0][0],parentCoordinatesLangLot[length-1][1],parentCoordinatesLangLot[0][1]));
        }
      designDistance(data,coordinateDistance_parent);
      // distance of coordinates 
      function distance(lat1,lat2, lon1, lon2){
        lon1 =  lon1 * Math.PI / 180;
        lon2 = lon2 * Math.PI / 180;
        lat1 = lat1 * Math.PI / 180;
        lat2 = lat2 * Math.PI / 180;
        let dlon = lon2 - lon1;
        let dlat = lat2 - lat1;
        let a = Math.pow(Math.sin(dlat / 2), 2)
                 + Math.cos(lat1) * Math.cos(lat2)
                 * Math.pow(Math.sin(dlon / 2),2);
               
        let c = 2 * Math.asin(Math.sqrt(a));
        let r = 6371;
        let sln = c*r;
        return(c * r * 1000* 3.28084 );
    }
 
      // mid point of coordinates 
      const midPointArray_parent = [];
     

      function midPointOfCoordinates(data,midPointArray){
        let coord = data.coordinates[0][0];
        for(let i = 1;i<coord.length;i++){
          let midx = (coord[i-1][0] + coord[i][0])/2;
          let midy = (coord[i-1][1] + coord[i][1])/2;
          midPointArray.push([midx,midy]);
        }
        midPointArray.push([(coord[0][0] + coord[coord.length - 1][0])/2,(coord[0][1] + coord[coord.length-1][1])/2]);
        
      }
      midPointOfCoordinates(data,midPointArray_parent);
      
      // function to add label : 
      function displayLabelForParentPlot(coordx,coordy,distance){
            const utm = "+proj=utm +zone=32";
            const wgs84 = "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs";
            const coord = proj4(utm,wgs84,[coordx, coordy])
            const labelFeature = new ol.Feature({
                geometry: new ol.geom.Point([coordx,coordy]),
            });

            const labelonly = new ol.style.Style({
                text: new ol.style.Text({
                    font: '14px sans-serif',
                    text:`${distance.toFixed(1)} ft`,
                    fill: new ol.style.Fill({
                        color: 'red'
                    }),
                })
            });

            labelFeature.setStyle(labelonly);
            const vectorSource_for_parent_label = new ol.source.Vector({
                features: [labelFeature]
            });

         
            
            map.addLayer(
                new ol.layer.Vector({
                    source: vectorSource_for_parent_label
                })
            );
        }

       for(let i = 0;i<midPointArray_parent.length;i++){
        if(coordinateDistance_parent[i]>0)
          displayLabelForParentPlot(midPointArray_parent[i][0]+4,midPointArray_parent[i][1]+4, coordinateDistance_parent[i]);
       }
   </script>

   <!-- cut parent polygon & modify line string  -->
    <script type="text/javascript">
      var LineSplitterGeoJson ;
      var modify = new ol.interaction.Modify({source: source});
     
      const typeSelect = document.getElementById('type');
      let draw,snap;
      var sp_1ShortLangLot = [];
      var sp_2ShortLangLot = [];
      function UtmToLangLotConverter(coordinates,array){
          for(let i = 0;i<coordinates[0].length;i++){
              const utm = "+proj=utm +zone=32";
              const wgs84 = "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs";
              const coord = proj4(utm,wgs84,[coordinates[0][i][0],coordinates[0][i][1]])
              array.push(coord);
               
              }
          }
      function addInteraction() {
        const value = typeSelect.value;
                if (value !== 'None') {
                    draw = new ol.interaction.Draw({
                          source: source,
                          type: typeSelect.value,
                          });
                map.addInteraction(draw);
                draw.on("drawend",function(e){
                    var writer = new ol.format.GeoJSON();
                    LineSplitterGeoJson = writer.writeFeatures([e.feature]);
                    console.log(JSON.parse(LineSplitterGeoJson));
                    
                });           
            }
      }
        typeSelect.onchange = function () {
            map.removeInteraction(draw);
            map.removeInteraction(snap);
            addInteraction();
        };
        
        map.addInteraction(modify);

        
        modify.on('modifyend',function(e){
          sp_1ShortLangLot = [];
          sp_2ShortLangLot = [];
          var format = new ol.format["GeoJSON"]();
          LineSplitterGeoJson = format.writeFeatures(source.getFeatures());
          splitOperationWithTurf();
          UtmToLangLotConverter(splittedPolygon.features[0].geometry.coordinates,sp_1ShortLangLot);
          const sp_area_1_polygon = turf.polygon([sp_1ShortLangLot]);
          const area_sp_1 = turf.area(sp_area_1_polygon);
          document.getElementById('sA_1').innerHTML =  (area_sp_1*0.00002295684113).toFixed(4) + " acre";

          UtmToLangLotConverter(splittedPolygon.features[1].geometry.coordinates,sp_2ShortLangLot);
          const sp_area_2_polygon = turf.polygon([sp_2ShortLangLot]);
          const area_sp_2 = turf.area(sp_area_2_polygon);
          document.getElementById('sA_2').innerHTML =  (area_sp_2*0.00002295684113).toFixed(4) + " acre ";
          
        });
      
     

        var splittedPolygon;
        function splitOperationWithTurf(){
            var plotGeoJson = JSON.parse(plotGeo);
            var lineStringJson = JSON.parse(LineSplitterGeoJson);
            var poly = turf.polygon(plotGeoJson.coordinates[0]);
            var line = turf.polygon(lineStringJson.features[0].geometry);
            var poly_coordinates = poly.geometry.coordinates;
            var line_coordinates  = [line.geometry.coordinates.coordinates];
            var polyAsLine = turf.polygonToLine(poly);
            var makeLineGeoJson = {
              "type":"feature",
               "geometry":{
                  "coordinates":line_coordinates[0],
                  "type": "LineString"
               }
            };
            var unionedLines =  turf.union(polyAsLine,makeLineGeoJson);
            const polygonized = turf.polygonize(unionedLines);
            splittedPolygon = polygonized;
            //alert ("Polygon is cutted Successfully!");
        }
    </script>

    <!-- script for child plot - 1 with label  -->
    <script>

      var sp_1CoordinatesLangLot = [];
         var spGeoJson_1 = {
            "type":"MultiPolygon"
        }
        function sp_1CoordinateLangLotConverter(){
              for(let i = 0;i<spGeoJson_1.coordinates[0][0].length;i++){
                const utm = "+proj=utm +zone=32";
                const wgs84 = "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs";
                const coord = proj4(utm,wgs84,[spGeoJson_1.coordinates[0][0][i][0],spGeoJson_1.coordinates[0][0][i][1]])
                sp_1CoordinatesLangLot.push(coord);
              }
          }
      function DisplaySplitPoly1(){
                var source_sp_1 = new ol.source.Vector({wrapX: false});
                vector_sp_1 = new ol.layer.Vector({
                    source: source_sp_1,
                });

                var map_sp_1 = new ol.Map({
                    target: 'map_sp_1',
                    layers: [
                        vector_sp_1,

                        new ol.layer.Graticule({
                          // the style to use for the lines, optional.
                          strokeStyle: new ol.style.Stroke({
                            color: 'rgba(255,120,0,0.9)',
                            width: 1,
                            lineDash: [10,10],
                          }),
                          showLabels: true ,
                          wrapX: false ,
                        }),
                    ],
                    view: new ol.View()
                });
           
            var geometry_sp_1 = new ol.format.GeoJSON().readGeometry(splittedPolygon.features[0].geometry);
            spGeoJson_1.coordinates = [splittedPolygon.features[0].geometry.coordinates];
            
            map_sp_1.addLayer(
                new ol.layer.Vector({
                  source: new ol.source.Vector({
                    features: [new ol.Feature(geometry_sp_1)]
                  }),
                  style: new ol.style.Style({
                      stroke: new ol.style.Stroke({
                        color: 'black',
                        width: 4
                      })
                  })
         
                })
              );
              map_sp_1.addLayer(
                  new ol.layer.Graticule({
                  // the style to use for the lines, optional.
                  strokeStyle: new ol.style.Stroke({
                    color: 'rgba(255,120,0,0.9)',
                    width: 1,
                    lineDash: [10,10],
                  }),
                  showLabels: true ,
                  wrapX: true ,
                }),
        
              )
              map_sp_1.getView().fit(geometry_sp_1);
              sp_1ShortLangLot = []
              UtmToLangLotConverter(splittedPolygon.features[0].geometry.coordinates,sp_1ShortLangLot);
              const sp_area_1_polygon = turf.polygon([sp_1ShortLangLot]);
              const area_sp_1 = turf.area(sp_area_1_polygon);
              document.getElementById('area_sp_1').innerHTML = "Area : " + (area_sp_1*0.00002295684113).toFixed(4)+ " acre ";
              
          //adding label for splitted polygon -1 
               // getting distance
          var midPointArray_sp_plot_1 = [];
          var coordinateDistance_sp_plot_1 = [];
     
        
          sp_1CoordinateLangLotConverter();

          function designDistance_sp_plot_1(spGeoJson_1,coordinateDistance){
            const length = spGeoJson_1.coordinates[0][0].length;
              for(let i = 1;i<length;i++){
                  var coord = spGeoJson_1.coordinates[0][0];
                  var dist = distance(sp_1CoordinatesLangLot[i-1][0],sp_1CoordinatesLangLot[i][0],sp_1CoordinatesLangLot[i-1][1],sp_1CoordinatesLangLot[i][1]);
                  coordinateDistance.push(dist);
              }
              coordinateDistance.push(distance(sp_1CoordinatesLangLot[length-1][0],sp_1CoordinatesLangLot[0][0],sp_1CoordinatesLangLot[length-1][1],sp_1CoordinatesLangLot[0][1]));
            }

            designDistance_sp_plot_1(spGeoJson_1,coordinateDistance_sp_plot_1);
          // distance of coordinates
        
          // mid point of coordinates
          function midPointOfCoordinates_sp_plot_1(spGeoJson_1,midPointArray_sp_plot_1){
            let coord = spGeoJson_1.coordinates[0][0];
            for(let i = 1;i<coord.length;i++){
              let midx = (coord[i-1][0] + coord[i][0])/2;
              let midy = (coord[i-1][1] + coord[i][1])/2;
              midPointArray_sp_plot_1.push([midx,midy]);
            }
            midPointArray_sp_plot_1.push([(coord[0][0] + coord[coord.length - 1][0])/2,(coord[0][1] + coord[coord.length-1][1])/2]);

          }

          midPointOfCoordinates_sp_plot_1(spGeoJson_1,midPointArray_sp_plot_1);

          // function to add label :
          function displayLabelFor_sp_plot_1(coordx,coordy,distance){       
                const utm = "+proj=utm +zone=32";
                const wgs84 = "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs";
                const coord = proj4(utm,wgs84,[coordx, coordy])
                const labelFeature_sp_plot_1 = new ol.Feature({
                    geometry: new ol.geom.Point([coordx,coordy]),
                });

                const labelonly_sp_plot_1 = new ol.style.Style({
                    text: new ol.style.Text({
                        font: '14px sans-serif',
                        text:`${distance.toFixed(1)} ft`,
                        fill: new ol.style.Fill({
                            color: 'red'
                        }),
                    })
                });

                labelFeature_sp_plot_1.setStyle(labelonly_sp_plot_1);
                const vectorSource_for_sp_plot_1 = new ol.source.Vector({
                    features: [labelFeature_sp_plot_1]
                });

            
                map_sp_1.addLayer(
                    new ol.layer.Vector({
                        source: vectorSource_for_sp_plot_1
                    })
                );
            }

            for(let i = 0;i<midPointArray_sp_plot_1.length;i++){
            if(coordinateDistance_sp_plot_1[i]>0)
              displayLabelFor_sp_plot_1(midPointArray_sp_plot_1[i][0]+4,midPointArray_sp_plot_1[i][1]+4, coordinateDistance_sp_plot_1[i]);
            }
          }
    </script>



    <!-- splitted polygon -2  -->
    
    <script>
        var sp_2CoordinatesLangLot = [];
       var spGeoJson_2 = {
            "type":"MultiPolygon"
        }
       function DisplaySplitPoly2(){
          var source_sp_2 = new ol.source.Vector({wrapX: false});
          var vector_sp_2 = new ol.layer.Vector({
              source: source_sp_2,
          });

          var map_sp_2 = new ol.Map({
              target: 'map_sp_2',
              layers: [
                  vector_sp_2,
                  new ol.layer.Graticule({
                // the style to use for the lines, optional.
                strokeStyle: new ol.style.Stroke({
                  color: 'rgba(255,120,0,0.9)',
                  width: 1,
                  lineDash: [10,10],
                }),
                showLabels: true ,
                wrapX: false ,
                
              }),
              ],
              view: new ol.View()
          });
    

  
        var geometry_sp_2 = new ol.format.GeoJSON().readGeometry(splittedPolygon.features[1].geometry);
        map_sp_2.addLayer(
            new ol.layer.Vector({
              source: new ol.source.Vector({
                features: [new ol.Feature(geometry_sp_2)]
              }),
              style: new ol.style.Style({
                      stroke: new ol.style.Stroke({
                        color: 'black',
                        width: 4
                      })
                  })
            })
          );
          map_sp_2.getView().fit(geometry_sp_2);
          map_sp_2.addLayer(
            new ol.layer.Graticule({
                // the style to use for the lines, optional.
                strokeStyle: new ol.style.Stroke({
                  color: 'rgba(255,120,0,0.9)',
                  width: 1,
                  lineDash: [10,10],
                }),
                showLabels: true ,
                wrapX: true ,
              }),
        
          )
          sp_2ShortLangLot = []
          UtmToLangLotConverter(splittedPolygon.features[1].geometry.coordinates,sp_2ShortLangLot);
          const sp_area_2_polygon = turf.polygon([sp_2ShortLangLot]);
          const area_sp_2 = turf.area(sp_area_2_polygon);
          document.getElementById('area_sp_2').innerHTML = "Area : " + (area_sp_2*0.00002295684113).toFixed(4) + " acre ";
          spGeoJson_2.coordinates = [splittedPolygon.features[1].geometry.coordinates];
          // label for splitted polygon -2 
          var midPointArray_sp_plot_2 = [];
          var coordinateDistance_sp_plot_2 = [];
        
          function sp_2CoordinateLangLotConverter(){
              for(let i = 0;i<spGeoJson_2.coordinates[0][0].length;i++){
                const utm = "+proj=utm +zone=32";
                const wgs84 = "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs";
                const coord = proj4(utm,wgs84,[spGeoJson_2.coordinates[0][0][i][0],spGeoJson_2.coordinates[0][0][i][1]])
                sp_2CoordinatesLangLot.push(coord);
              }
          }
          sp_2CoordinateLangLotConverter();
          function designDistance_sp_plot_2(spGeoJson_2,coordinateDistance){
            const length = spGeoJson_2.coordinates[0][0].length;
              for(let i = 1;i<length;i++){
                  var coord = spGeoJson_2.coordinates[0][0];
                  var dist = distance(sp_2CoordinatesLangLot[i-1][0],sp_2CoordinatesLangLot[i][0],sp_2CoordinatesLangLot[i-1][1],sp_2CoordinatesLangLot[i][1]);
                  coordinateDistance.push(dist);
              }
              coordinateDistance.push(distance(sp_2CoordinatesLangLot[length-1][0],sp_2CoordinatesLangLot[0][0],sp_2CoordinatesLangLot[length-1][1],sp_2CoordinatesLangLot[0][1]));

            }
        

            designDistance_sp_plot_2(spGeoJson_2,coordinateDistance_sp_plot_2);
     
       
          // mid point of coordinates
          


          function midPointOfCoordinates_sp_plot_2(spGeoJson_2,midPointArray_sp_plot_2){
            let coord = spGeoJson_2.coordinates[0][0];
            
            for(let i = 1;i<coord.length;i++){
              let midx = (coord[i-1][0] + coord[i][0])/2;
              let midy = (coord[i-1][1] + coord[i][1])/2;
              midPointArray_sp_plot_2.push([midx,midy]);
            }
            midPointArray_sp_plot_2.push([(coord[0][0] + coord[coord.length - 1][0])/2,(coord[0][1] + coord[coord.length-1][1])/2]);
          }
          midPointOfCoordinates_sp_plot_2(spGeoJson_2,midPointArray_sp_plot_2);

          // function to add label :
          function displayLabelFor_sp_plot_2(coordx,coordy,distance){
                
                const utm = "+proj=utm +zone=32";
                const wgs84 = "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs";
                const coord = proj4(utm,wgs84,[coordx, coordy])
                const labelFeature_sp_plot_2= new ol.Feature({
                    geometry: new ol.geom.Point([coordx,coordy]),
                });

                const labelonly_sp_plot_2 = new ol.style.Style({
                    text: new ol.style.Text({
                        font: '14px sans-serif',
                        text:`${distance.toFixed(1)} ft`,
                        fill: new ol.style.Fill({
                            color: 'red'
                        }),
                    })
                });

                labelFeature_sp_plot_2.setStyle(labelonly_sp_plot_2);
                const vectorSource_for_sp_plot_2 = new ol.source.Vector({
                    features: [labelFeature_sp_plot_2]
                });

            
                map_sp_2.addLayer(
                    new ol.layer.Vector({
                        source: vectorSource_for_sp_plot_2
                    })
                );
            }

            for(let i = 0;i<midPointArray_sp_plot_2.length;i++){
            if(coordinateDistance_sp_plot_2[i]>0)
              displayLabelFor_sp_plot_2(midPointArray_sp_plot_2[i][0]+2,midPointArray_sp_plot_2[i][1]+2, coordinateDistance_sp_plot_2[i]);
            }
          
          

        }
    </script>
  </body>
</html>






