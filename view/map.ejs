<!doctype html>
<html lang="en">
  <head>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.5.0/css/ol.css" type="text/css">
    <link rel="stylesheet" href="css/style.css" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/proj4js/2.6.2/proj4.min.js"></script>
    <script src="https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.5.0/build/ol.js"></script>
    <script src="https://unpkg.com/@turf/turf@5.1.6/turf.min.js"></script>

  </head>
  <body>
 

    <div id="map" class="map"></div>
    <p>Splitted Area 1 : <span id="sA_1"></span> </p>
    <p>Splitted Area 2 : <span id="sA_2"></span></p>
    <br><br>
    <input id="plotInfo" type="hidden" value="<%=plotInfo %> "/>
    
    <br>
    <br>
    <table border="1px">
      <tr>
        <td>
          <button onclick="splitOperationWithTurf()"> Cut PolyGon </button></td>
        </td>
        <td>
          <div>
            <div>
                <span>
                  <label > Draw Geometry :</label>
                  <select  id="type">
                    <option value="Point">Point</option>
                    <option value="LineString">LineString</option>
                    <option value="Polygon">Polygon</option>
                    <option value="Circle">Circle</option>
                    <option value="None">None</option>
                  </select>
                </span>
            </div>
          </div>
        </td>
        <td>
          <button onclick="DisplaySplitPoly1()"> Display Splitted Polygon - 1  </button>
        </td>
        <td>
          <button onclick="DisplaySplitPoly2()"> Display Splitted Polygon - 2  </button>
        </td>
      </tr>
    </table>
    <br>
    <br>
    <div id="map_sp_1" class="map">
      <p id="area_sp_1"></p>
    </div>
    <br><br>
    <div id="map_sp_2" class="map">
      <p id="area_sp_2"></p>
    </div>
    
    <!-- script for display parent plot  -->
   <script type="text/javascript">
     
      const source = new ol.source.Vector({wrapX: false});
      const vector_plot = new ol.layer.Vector({
            source:source,
        });
      const plotGeo =  document.getElementById("plotInfo").value;
      var map = new ol.Map({
            target: 'map',
            layers: [
                vector_plot
            ],
            view: new ol.View()
        });
      var geometry = new ol.format.GeoJSON().readGeometry(plotGeo);
      map.addLayer(
        new ol.layer.Vector({
          source: new ol.source.Vector({
            features: [new ol.Feature(geometry)]
          })
        })
      );
      map.getView().fit(geometry);
   </script>

   <!-- labeling for parent plot  -->
   <script>
      var data = JSON.parse(plotGeo)
       // getting distance 
      var coordinateDistance_parent = [];
      var coordinateDistance_sp_plot_1 = [];
      var coordinateDistance_sp_plot_2 = [];
      function designDistance(data,coordinateDistance){
        const length = data.coordinates[0][0].length;
          for(let i = 1;i<length;i++){
              var coord = data.coordinates[0][0];
              var dist = distance(coord[i-1][0],coord[i][0],coord[i-1][1],coord[i][1]);
              coordinateDistance.push(dist);
          }
          coordinateDistance.push(distance(coord[length-1][0],coord[0][0],coord[length-1][1],coord[0][1]));
          
        }
      designDistance(data,coordinateDistance_parent);
      // distance of coordinates 
      function distance(x1,x2, y1,y2){
         return Math.sqrt(  Math.pow((x1-x2),2)+ Math.pow((y1-y2),2));
      }
      // mid point of coordinates 
      const midPointArray_parent = [];
     

      function midPointOfCoordinates(data,midPointArray){
        let coord = data.coordinates[0][0];
        
        for(let i = 1;i<coord.length;i++){
          let midx = (coord[i-1][0] + coord[i][0])/2;
          let midy = (coord[i-1][1] + coord[i][1])/2;
          midPointArray.push([midx,midy]);
        }
        midPointArray.push([(coord[0][0] + coord[coord.length - 1][0])/2,(coord[0][1] + coord[coord.length-1][1])/2]);
        
      }
      midPointOfCoordinates(data,midPointArray_parent);
      
      // function to add label : 
      function displayLabelForParentPlot(coordx,coordy,distance){
            const utm = "+proj=utm +zone=32";
            const wgs84 = "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs";
            const coord = proj4(utm,wgs84,[coordx, coordy])
            const labelFeature = new ol.Feature({
                geometry: new ol.geom.Point([coordx,coordy]),
            });

            const labelonly = new ol.style.Style({
                text: new ol.style.Text({
                    font: '14px sans-serif',
                    text:`${parseInt(distance)} m`,
                    fill: new ol.style.Fill({
                        color: 'red'
                    }),
                })
            });

            labelFeature.setStyle(labelonly);
            const vectorSource_for_parent_label = new ol.source.Vector({
                features: [labelFeature]
            });

         
            
            map.addLayer(
                new ol.layer.Vector({
                    source: vectorSource_for_parent_label
                })
            );
        }

       for(let i = 0;i<midPointArray_parent.length;i++){
        if(coordinateDistance_parent[i]>0)
          displayLabelForParentPlot(midPointArray_parent[i][0]+4,midPointArray_parent[i][1]+4, coordinateDistance_parent[i]);
       }
   </script>

   <!-- cut parent polygon & modify line string  -->
    <script type="text/javascript">
      var LineSplitterGeoJson ;
      var modify = new ol.interaction.Modify({source: source});
     
      const typeSelect = document.getElementById('type');
      let draw,snap;
      
      function addInteraction() {
        const value = typeSelect.value;
                if (value !== 'None') {
                    draw = new ol.interaction.Draw({
                    source: source,
                    type: typeSelect.value,
                });
                map.addInteraction(draw);
                draw.on("drawend",function(e){
                    var writer = new ol.format.GeoJSON();
                    console.log("lx:")
                    LineSplitterGeoJson = writer.writeFeatures([e.feature]);
                    console.log(JSON.parse(LineSplitterGeoJson));
                    
                });           
            }
      }
        typeSelect.onchange = function () {
            map.removeInteraction(draw);
            map.removeInteraction(snap);
            addInteraction();
        };
        
        map.addInteraction(modify);
        
        modify.on('modifyend',function(e){
          console.log("Modifyed Feature : ")
          var format = new ol.format["GeoJSON"]();
          LineSplitterGeoJson = format.writeFeatures(source.getFeatures());
          console.log("ly: ");
          console.log(LineSplitterGeoJson);
          splitOperationWithTurf();
          const sp_area_1_polygon = turf.polygon(splittedPolygon.features[0].geometry.coordinates);
          const area_sp_1 = turf.area(sp_area_1_polygon);
          document.getElementById('sA_1').innerHTML = "Area : " + area_sp_1/1000 + " Square KM ";
          
          const sp_area_2_polygon = turf.polygon(splittedPolygon.features[1].geometry.coordinates);
          const area_sp_2 = turf.area(sp_area_2_polygon);
          document.getElementById('sA_2').innerHTML = "Area : " + area_sp_2/1000 + " Square KM ";
          
        });

     

        var splittedPolygon;
        function splitOperationWithTurf(){
            var plotGeoJson = JSON.parse(plotGeo);
            var lineStringJson = JSON.parse(LineSplitterGeoJson);
            var poly = turf.polygon(plotGeoJson.coordinates[0]);
            var line = turf.polygon(lineStringJson.features[0].geometry);
            var poly_coordinates = poly.geometry.coordinates;
            var line_coordinates  = [line.geometry.coordinates.coordinates];
            var polyAsLine = turf.polygonToLine(poly);
            var makeLineGeoJson = {
              "type":"feature",
               "geometry":{
                  "coordinates":line_coordinates[0],
                  "type": "LineString"
               }
            };
            var unionedLines =  turf.union(polyAsLine,makeLineGeoJson);
            const polygonized = turf.polygonize(unionedLines);
            splittedPolygon = polygonized;
        }
    </script>

    <!-- script for child plot - 1 with label  -->
    <script>
         var spGeoJson_1 = {
            "type":"MultiPolygon"
        }
      function DisplaySplitPoly1(){

                var source_sp_1 = new ol.source.Vector({wrapX: false});
                var vector_sp_1 = new ol.layer.Vector({
                    source: source_sp_1,
                });

                var map_sp_1 = new ol.Map({
                    target: 'map_sp_1',
                    layers: [
                        vector_sp_1
                    ],
                    view: new ol.View()
                });
        
            var geometry_sp_1 = new ol.format.GeoJSON().readGeometry(splittedPolygon.features[0].geometry);
            spGeoJson_1.coordinates = [splittedPolygon.features[0].geometry.coordinates];
            
          
            
            map_sp_1.addLayer(
                new ol.layer.Vector({
                  source: new ol.source.Vector({
                    features: [new ol.Feature(geometry_sp_1)]
                  })
                })
              );
              map_sp_1.getView().fit(geometry_sp_1);
              const sp_area_1_polygon = turf.polygon(splittedPolygon.features[0].geometry.coordinates);
              const area_sp_1 = turf.area(sp_area_1_polygon);
              document.getElementById('area_sp_1').innerHTML = "Area : " + area_sp_1 + " Square Meters ";
              
          //adding label for splitted polygon -1 
               // getting distance
          var midPointArray_sp_plot_1 = [];
          var coordinateDistance_sp_plot_1 = [];

          function designDistance_sp_plot_1(spGeoJson_1,coordinateDistance){
            const length = spGeoJson_1.coordinates[0][0].length;
              for(let i = 1;i<length;i++){
                  var coord = spGeoJson_1.coordinates[0][0];
                  var dist = distance_sp_plot_1(coord[i-1][0],coord[i][0],coord[i-1][1],coord[i][1]);
                  coordinateDistance.push(dist);
              }
              coordinateDistance.push(distance_sp_plot_1(coord[length-1][0],coord[0][0],coord[length-1][1],coord[0][1]));

            }

            designDistance_sp_plot_1(spGeoJson_1,coordinateDistance_sp_plot_1);
          // distance of coordinates
          function distance_sp_plot_1(x1,x2, y1,y2){
              return Math.sqrt(  Math.pow((x1-x2),2)+ Math.pow((y1-y2),2));
          }
          // mid point of coordinates
          function midPointOfCoordinates_sp_plot_1(spGeoJson_1,midPointArray_sp_plot_1){
            let coord = spGeoJson_1.coordinates[0][0];
            for(let i = 1;i<coord.length;i++){
              let midx = (coord[i-1][0] + coord[i][0])/2;
              let midy = (coord[i-1][1] + coord[i][1])/2;
              midPointArray_sp_plot_1.push([midx,midy]);
            }
            midPointArray_sp_plot_1.push([(coord[0][0] + coord[coord.length - 1][0])/2,(coord[0][1] + coord[coord.length-1][1])/2]);

          }

          midPointOfCoordinates_sp_plot_1(spGeoJson_1,midPointArray_sp_plot_1);

          // function to add label :
          function displayLabelFor_sp_plot_1(coordx,coordy,distance){       
                const utm = "+proj=utm +zone=32";
                const wgs84 = "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs";
                const coord = proj4(utm,wgs84,[coordx, coordy])
                const labelFeature_sp_plot_1 = new ol.Feature({
                    geometry: new ol.geom.Point([coordx,coordy]),
                });

                const labelonly_sp_plot_1 = new ol.style.Style({
                    text: new ol.style.Text({
                        font: '14px sans-serif',
                        text:`${parseInt(distance)} m`,
                        fill: new ol.style.Fill({
                            color: 'red'
                        }),
                    })
                });

                labelFeature_sp_plot_1.setStyle(labelonly_sp_plot_1);
                const vectorSource_for_sp_plot_1 = new ol.source.Vector({
                    features: [labelFeature_sp_plot_1]
                });

            
                map_sp_1.addLayer(
                    new ol.layer.Vector({
                        source: vectorSource_for_sp_plot_1
                    })
                );
            }

            for(let i = 0;i<midPointArray_sp_plot_1.length;i++){
            if(coordinateDistance_sp_plot_1[i]>0)
              displayLabelFor_sp_plot_1(midPointArray_sp_plot_1[i][0]+4,midPointArray_sp_plot_1[i][1]+4, coordinateDistance_sp_plot_1[i]);
            }
          }
    </script>



    <!-- splitted polygon -2  -->
    <script>
       var spGeoJson_2 = {
            "type":"MultiPolygon"
        }
       function DisplaySplitPoly2(){
          var source_sp_2 = new ol.source.Vector({wrapX: false});
          var vector_sp_2 = new ol.layer.Vector({
              source: source_sp_2,
          });

          var map_sp_2 = new ol.Map({
              target: 'map_sp_2',
              layers: [
                  vector_sp_2
              ],
              view: new ol.View()
          });
    

  
        var geometry_sp_2 = new ol.format.GeoJSON().readGeometry(splittedPolygon.features[1].geometry);
        map_sp_2.addLayer(
            new ol.layer.Vector({
              source: new ol.source.Vector({
                features: [new ol.Feature(geometry_sp_2)]
              })
            })
          );
          map_sp_2.getView().fit(geometry_sp_2);
          const sp_area_2_polygon = turf.polygon(splittedPolygon.features[1].geometry.coordinates);
          const area_sp_2 = turf.area(sp_area_2_polygon);
          document.getElementById('area_sp_2').innerHTML = "Area : " + area_sp_2 + " Square Meters ";
          spGeoJson_2.coordinates = [splittedPolygon.features[1].geometry.coordinates];
          // label for splitted polygon -2 
          var midPointArray_sp_plot_2 = [];
          var coordinateDistance_sp_plot_2 = [];

          function designDistance_sp_plot_2(spGeoJson_2,coordinateDistance){
            const length = spGeoJson_2.coordinates[0][0].length;
              for(let i = 1;i<length;i++){
                  var coord = spGeoJson_2.coordinates[0][0];
                  var dist = distance_sp_plot_2(coord[i-1][0],coord[i][0],coord[i-1][1],coord[i][1]);
                  coordinateDistance.push(dist);
              }
              coordinateDistance.push(distance_sp_plot_2(coord[length-1][0],coord[0][0],coord[length-1][1],coord[0][1]));
            }

            designDistance_sp_plot_2(spGeoJson_2,coordinateDistance_sp_plot_2);
          // distance of coordinates
          function distance_sp_plot_2(x1,x2, y1,y2){
              return Math.sqrt(  Math.pow((x1-x2),2)+ Math.pow((y1-y2),2));
          }
          // mid point of coordinates
          


          function midPointOfCoordinates_sp_plot_2(spGeoJson_2,midPointArray_sp_plot_2){
            let coord = spGeoJson_2.coordinates[0][0];
            
            for(let i = 1;i<coord.length;i++){
              let midx = (coord[i-1][0] + coord[i][0])/2;
              let midy = (coord[i-1][1] + coord[i][1])/2;
              midPointArray_sp_plot_2.push([midx,midy]);
            }
            midPointArray_sp_plot_2.push([(coord[0][0] + coord[coord.length - 1][0])/2,(coord[0][1] + coord[coord.length-1][1])/2]);

          }
          midPointOfCoordinates_sp_plot_2(spGeoJson_2,midPointArray_sp_plot_2);

          // function to add label :
          function displayLabelFor_sp_plot_2(coordx,coordy,distance){
                
                const utm = "+proj=utm +zone=32";
                const wgs84 = "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs";
                const coord = proj4(utm,wgs84,[coordx, coordy])
                const labelFeature_sp_plot_2= new ol.Feature({
                    geometry: new ol.geom.Point([coordx,coordy]),
                });

                const labelonly_sp_plot_2 = new ol.style.Style({
                    text: new ol.style.Text({
                        font: '14px sans-serif',
                        text:`${parseInt(distance)} m`,
                        fill: new ol.style.Fill({
                            color: 'red'
                        }),
                    })
                });

                labelFeature_sp_plot_2.setStyle(labelonly_sp_plot_2);
                const vectorSource_for_sp_plot_2 = new ol.source.Vector({
                    features: [labelFeature_sp_plot_2]
                });

            
                map_sp_2.addLayer(
                    new ol.layer.Vector({
                        source: vectorSource_for_sp_plot_2
                    })
                );
            }

            for(let i = 0;i<midPointArray_sp_plot_2.length;i++){
            if(coordinateDistance_sp_plot_2[i]>0)
              displayLabelFor_sp_plot_2(midPointArray_sp_plot_2[i][0]+2,midPointArray_sp_plot_2[i][1]+2, coordinateDistance_sp_plot_2[i]);
            }
                

        }
    </script>

    

  
  </body>
</html>






